plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'idea'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    include modImplementation("dev.thomasglasser.tommylib:tommylib-fabric-${minecraft_version}:${tommylib_version}")
    include modImplementation("maven.modrinth:midnightlib:${midnightlib_version}-fabric")

    modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-fabric-1.20.5:${sbl_version}"
//    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-fabric-${minecraft_version}:${sbl_version}"
//    modImplementation "dev.emi:trinkets:${trinkets_version}"

    // Runtime
//    modRuntimeOnly "com.terraformersmc:modmenu:${modmenu_version}"
    modRuntimeOnly "maven.modrinth:jade:${jade_version}+fabric"
    "mezz.jei:jei-${previous_minecraft_version}-fabric:${jei_version}"
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        // Must specify "accesswidener" field in fabric.mod.json
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }

    mixin {
        add sourceSets.main, "${mod_id}.refmap.json"
    }
}

tasks.withType(ProcessResources).configureEach {
    from project(":common").sourceSets.main.resources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}